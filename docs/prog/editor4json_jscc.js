vJSCC_DB['ClassList']['Editor4JSON'] = {
    "JSCC_type": "CLASS",
    "JSCC_init_date": "15.6.2017",
    "JSCC_mod_date": "2017/06/04 5:44:55",
    "tClassname": "Editor4JSON",
    "tSuperClassname": "",
    "sClassType": "Blue",
    "tAuthor": "Engelbert Niehaus",
    "tEMail": "niehaus@uni-landau.de",
    "tAttributes": "aEditor = null\naName = \"myjson\"\naData = []\ncurrent = -1\naSchemaJSON = null\naEditURL = \"\"\naDOMID = null",
    "tMethods": "init(pDOMID:Hash,pData:Array,pSchema:Hash)\ncheck()\nupdateDOM()\nprev()\nnext()\ngoto(i)\nfirst()\nlast()\nedit()\nsetSchema(pSchemaJSON:Hash)\ngetSchema():Hash\nexport()\nexportData()\nexportSchema()\ngetLocalStorageID4Name(pName:String):String\nloadLS()\nload()\nsaveLS()\nsave()\nvalidate():Boolean\nonChange()\ndeleteRecord()\ndeleteAsk()\nsetEditorData(pEditorData:Hash)\ngetEditorData():Hash",
    "sAttribList": "aName",
    "tAttribName": "",
    "tAttribType": "",
    "tAttribComment": "",
    "tAttribDefault": "",
    "sAttribTypeList": "",
    "tMethodHeader": "save()",
    "tMethodName": "",
    "tMethodComment": "Comment for save",
    "sMethodList": "save",
    "tMethodCode": "",
    "tLoopObject": "",
    "tLoopMethod": "",
    "AttribType": {
        "aEditor": "JSONEditor",
        "aData": "Array",
        "current": " ",
        "aSchemaJSON": " ",
        "aEditURL": "String",
        "aName": "String",
        "aDOMID": "Hash"
    },
    "AttribAccess": {
        "aEditor": "public",
        "aData": "public",
        "current": "public",
        "aSchemaJSON": "public",
        "aEditURL": "public",
        "aName": "public",
        "aDOMID": "public"
    },
    "AttribDefault": {
        "aEditor": "null",
        "aName": "\"myjson\"",
        "aData": "[]",
        "current": "-1",
        "aSchemaJSON": "null",
        "aEditURL": "\"\"",
        "aDOMID": "null"
    },
    "AttribComment": {
        "aEditor": "is the instance of the JSON editor developed by Jeremy Dorn",
        "aData": "the attribute 'aData' is a array of JSON records that are edited with the JSON editor by Jeremy Dorn",
        "current": "the attribute 'current' stores the current selected index in the array, -1 means no JSON record selected in array or array is empty",
        "aSchemaJSON": "the attribute 'aSchemaJSON' stores in JSON schema that defines the structure of JSON records in the array",
        "aEditURL": "the attribute 'aEditURL' stores the URL to the JSON Editor developed by Jeremy Dorn",
        "aName": "the attribute 'aName' stores the base name of the JSON file. it used for base name for export files.",
        "aDOMID": "the attribute 'aDOMID' stores in ids of DOM element, e.g. editor_holder, valid ... "
    },
    "MethodParameter": {
        "init": "pDOMID:Hash,pData:Array,pSchema:Hash",
        "prev": "",
        "next": "",
        "goto": "i",
        "first": "",
        "last": "",
        "edit": "",
        "setSchema": "pSchemaJSON:Hash",
        "getSchema": "",
        "export": "",
        "exportData": "",
        "exportSchema": "",
        "getLocalStorageID4Name": "pName:String",
        "loadLS": "",
        "saveLS": "",
        "validate": "",
        "onChange": "",
        "deleteRecord": "",
        "deleteAsk": "",
        "check": "",
        "updateDOM": "",
        "setEditorData": "pEditorData:Hash",
        "getEditorData": "",
        "load": "",
        "save": ""
    },
    "MethodReturn": {
        "init": "",
        "prev": "",
        "next": "",
        "goto": "",
        "first": "",
        "last": "",
        "edit": "",
        "setSchema": "",
        "getSchema": "Hash",
        "export": "",
        "exportData": "",
        "exportSchema": "",
        "getLocalStorageID4Name": "String",
        "loadLS": "",
        "saveLS": "",
        "validate": "Boolean",
        "onChange": "",
        "deleteRecord": "",
        "deleteAsk": "",
        "check": "",
        "updateDOM": "",
        "setEditorData": "",
        "getEditorData": "Hash",
        "load": "",
        "save": ""
    },
    "MethodCode": {
        "init": "this.aSchema = pSchema;\nthis.aData = pData;\nthis.loadLS(); // load aData from local storage if that exists\nthis.aDOMID = pDOMID; // is a Hash with keys \"name\" of Schema, DOM ID \"editor\", \"validator\",\nthis.aName = pDOMID[\"name\"] || \"myjson\";\nthis.aEditorConfig = {\n        // Enable fetching schemas via ajax\n        ajax: true,\n        \n        // The schema for the editor\n        schema: pSchema,\n        \n       \n        // Disable additional properties\n        no_additional_properties: true,\n        \n        // Require all properties by default\n        required_by_default: true\n      };\n// Seed the form with a starting value for the Editor if pData contains at least one record\n if (pData.length > 0) {\n    this.aEditorConfig.startval = pData[0];\n};\n// create the editor\nvar vEditorDOM = document.getElementById(this.aDOMID[\"editor\"]);\nif (vEditorDOM) {\n    this.aEditor = new JSONEditor(vEditorDOM,this.aEditorConfig);\n} else {\n    console.log(\"ERROR: Editor DOM with ID=â€˜\"+this.aDOMID[\"editor\"]+\"' does not exist!\")\n};\n\n// Hook up the validation indicator to update its \n// status whenever the editor changes\nthis.aEditor.on('change',function() {\n        // upadte the currect record in large array\n        vEditor4JSON.onChange()\n      });\n//update the current index\nthis.updateDOM();\n",
        "prev": "if (this.current > 0) {\n    this.current--;\n};\nconsole.log(\"Prev Click [\"+this.current+\"]\");\nthis.edit();",
        "next": "if (this.current < (this.aData.length-1)) {\n      this.current++;\n};\nconsole.log(\"Next Click [\"+this.current+\"]\");\nthis.edit();",
        "goto": "if ((i >= 0) && (i < this.aData.length)) {\n    this.current = i;\n} else if (this.aData.length > 0) {\n    this.current = 0;\n} else {\n    this.current = -1;\n};\nconsole.log(\"Goto [\"+this.current+\"]\");\nthis.edit();",
        "first": "this.current = 0;\nconsole.log(\"First Click [\"+this.current+\"]\");\nthis.edit();",
        "last": "this.current = this.aData.length - 1;\nconsole.log(\"Last Click [\"+this.current+\"]\");\nthis.edit();",
        "edit": "// edit creates at least one record in the array this.aData\nif (this.aData.length == 0) {\n    // push an empty JSON hash\n    console.log(\"pData is empty create an empty element in the large array\")\n    this.aData.push({});\n};\nif (this.current < 0) {\n    console.log(\"current index in large array is not for the large array - use first element\")\n    this.current = 0;\n};\nthis.aEditor.setValue(this.aData[this.current]);\nthis.updateDOM();",
        "setSchema": "this.aSchemaJSON = pSchemaJSON;\nif (this.aEditor) {\n    this.aEditor.destroy();\n    document.getElementById(this.aDOMID[\"editor\"]).innerHTML = \"\";\n};\nthis.init(this.aDOMID,this.aData,this.aSchemaJSON);",
        "getSchema": "return this.aSchemaJSON;",
        "export": "var vStringJSON = JSON.stringify(pJSON,null,4);\n// File is a Javascript Class defined in FileSaver.js\nvar file = new File([vStringJSON], {type: \"text/plain;charset=utf-8\"});\n// method saveAs() is defined in FileSaver.js so import filesaver.js and blob.js to your Javascript project\nsaveAs(file,pFilename);\n",
        "exportData": "this.export(this.aName+\".json\",this.aData)",
        "exportSchema": "this.export(this.aName+\"_schema.json\",this.aSchemaJSON)",
        "getLocalStorageID4Name": "return pName.replace(/[^A-Za-z0-9]/g,\"_\");\n",
        "loadLS": "if (typeof(Storage) != \"undefined\") {\n    // Store\n    if (typeof(localStorage.getItem(this.aName)) !== undefined) {\n      console.log(\"JSON-DB '\"+this.aName+\"' try loading from Local Storage\");\n      var vJSONstring = localStorage.getItem(this.aName);\n\t  if (!vJSONstring) {\n        console.log(\"JSON-DB '\"+this.aName+\"' undefined in Local Storage.\\nSave default as JSON\");\n        localStorage.setItem(this.aName, JSON.stringify(this.getEditorData()));\n\t  } else {\n        console.log(\"parse DB '\"+this.aName+\"') from LocalStorage JSONstring='\"+vJSONstring.substr(0,120)+\"...'\");\n        try {\n            this.setEditorData(JSON.parse(vJSONstring));\n        } catch(e) {\n            alert(e)\n        };\n\t  }\n    } else {\n      console.log(\"JSON-DB '\"+this.aName+\"' is undefined in Local Storage.\\nSave default as JSON\");\n      localStorage.setItem(vDBID, JSON.stringify(this.aData));\n    };\n}\t else {\n    console.log(\"WARNING: Sorry, your browser does not support Local Storage of JSON Database. Use Firefox ...\");\n};",
        "saveLS": "if (typeof(Storage) != \"undefined\") {\n    // Store\n    if (typeof(this.aData) != undefined) {\n      console.log(\"JSON-DB '\"+this.aName+\"' is defined, JSONDB in  Local Storage\");\n      if (this.aData) {\n        //console.log(\"pJSONDB '\"+this.aName+\"' is saved to Local Storage\");\n        var vJSONstring = JSON.stringify(this.aData)\n        console.log(\"saveLS('\"+this.aName+\"') JSONstring='\"+vJSONstring.substr(0,120)+\"...'\");\n        localStorage.setItem(this.aName,vJSONstring);\n      } else {\n        console.log(\"this.aData in Editor4JSON is NOT defined\");\n      }\n    } else {\n      console.log(\"pJSONDB is undefined\");\n    };\n  }\t else {\n    console.log(\"WARNING: Sorry, your browser does not support Local Storage of JSON Database. Use Firefox ...\");\n  }",
        "validate": "\n// Get an array of errors from the validator\n//var errors = editor.validate();\nvar errors = this.aEditor.validate();\nvar vValid = true;\nif (errors.length) {\n  vValid = false;\n};\nvar vID = this.aDOMID['valid_indicator'] || 'valid_indicator';\nvar indicator = document.getElementById(vID);\nif (!indicator) {\n    console.log(\"DOM element '\"+vID+\"' does not exist\")\n} else {\n    if (errors.length) {\n        // Not valid\n        //indicator.style.color = 'red';\n        indicator.style.color = 'white';\n        indicator.style.backgroundColor = 'red';\n        indicator.textContent = \" not valid \";\n    } else {\n        // Valid\n        //indicator.style.color = 'green';\n        indicator.style.color = 'white';\n        indicator.style.backgroundColor = 'green';\n        indicator.textContent = \" valid \";\n    }\n};\nreturn vValid;\n",
        "onChange": "if (this.current > -1) {\n    if (this.current < this.aData.length) {\n    this.aData[this.current] = this.aEditor.getValue();\n};\nthis.saveLS();",
        "deleteRecord": "this.check(); // is in the range of indices of the array this.aData\nif (this.current > -1) {\n    this.aData.splice(this.current, 1);\n};\nthis.edit();",
        "deleteAsk": "var vOK = confirm(\"Do you really want to delete the current record?\");\nif(vOK == true) {\n    this.deleteRecord();\n} else {\n    console.log(\"Delete Record cancelled\")\n};",
        "check": "if (this.aData.length === 0) {\n    this.current = -1\n} else {\n    if (this.current < 0) { \n        this.current = 0\n    };\n    if (this.current >= this.aData.length) {\n        this.current = this.aData.length - 1;\n    };\n};\n",
        "updateDOM": "//--- update current array index ------------\nvar vID = this.aDOMID[\"current\"] || \"array_index\";\nwrite2value(vID,(this.current+1));\n//--- update array length -------------------\nvID = this.aDOMID[\"length\"] || \"array_length\";\nwrite2innerHTML(vID,this.aData.length);\n//--- update title ID='record_title'---------\nif (this.aDOMID.hasOwnProperty(\"title\")) {\n    vID = this.aDOMID[\"title\"];\n    if (this.aData[this.current].hasOwnProperty(vID)) {\n        write2innerHTML(vID,this.aData.length);\n    };\n};\n// validate the record against Schema JSON\nthis.validate();",
        "setEditorData": "this.current = pEditorData[\"current\"] || 0;\nthis.aData = pEditorData[\"data\"] ||Â [];\nthis.aSchemaJSON = pEditorData[\"schema\"] ||Â vDataJSON[\"car\"]",
        "getEditorData": "this.aSchema = pSchema;\nthis.aData = pData;\nthis.loadLS(); // load aData from local storage if that exists\nthis.aDOMID = pDOMID; // is a Hash with keys \"name\" of Schema, DOM ID \"editor\", \"validator\",\nthis.aName = pDOMID[\"name\"] || \"myjson\";\nthis.aEditorConfig = {\n        // Enable fetching schemas via ajax\n        ajax: true,\n        \n        // The schema for the editor\n        schema: pSchema,\n        \n       \n        // Disable additional properties\n        no_additional_properties: true,\n        \n        // Require all properties by default\n        required_by_default: true\n      };\n// Seed the form with a starting value for the Editor if pData contains at least one record\n if (pData.length > 0) {\n    this.aEditorConfig.startval = pData[0];\n};\n// create the editor\nvar vEditorDOM = document.getElementById(this.aDOMID[\"editor\"]);\nif (vEditorDOM) {\n    this.aEditor = new JSONEditor(vEditorDOM,this.aEditorConfig);\n} else {\n    console.log(\"ERROR: Editor DOM with ID=â€˜\"+this.aDOMID[\"editor\"]+\"' does not exist!\")\n};\n\n// Hook up the validation indicator to update its \n// status whenever the editor changes\nthis.aEditor.on('change',function() {\n        // upadte the currect record in large array\n        vEditor4JSON.onChange()\n      });\n//update the current index\nthis.updateDOM();\n",
        "load": "this.loadLS();\nthis.edit();\nthis.updateDOM();",
        "save": "this.saveLS();\nthis.exportData();"
    },
    "MethodComment": {
        "init": "(1)pDOMID is hash with DOM ids that contains the following key/value pairs\n - \"name\" is the name of JSON database that is used for the exported filename for JSON\n - \"editor\" the DOM element where the JSON editor is injected (editor_holder of JSON editor).\n - \"validator\" is the DOM element to \"valid\" or \"not valid\" to (innerHTML) used in updateDOM()\n - \"current\" is the DOM element to write the currently selected array index into a text input box (value) used in updateDOM()\n - \"length\" is the DOM element to write the current array length to (innerHTML) used in updateDOM()\n(2) pData is the large array that is edited and \n(3) pSchema defines the JSON schema of a single record in the large thisarray",
        "prev": "goto previous record",
        "next": "Goto next record",
        "goto": "goto record with index i",
        "first": "shows the first element in the large record",
        "last": "goes to the last record in large array",
        "edit": "edit calls the JSON editor of Jeremy Dorn for the selected record. It sets the init value of the JSON editor.  ",
        "setSchema": "setSchema() sets a new schema for the JSON editor and the records of the array. If the editor this.aEditor exists, setSchema will destroy the current JSON editor to free some resources otherwise it will call the init method again.",
        "getSchema": "getSchema() just return the JSON schema this.aSchemaJSON",
        "export": "export() uses the FileSaver.js to create a download of exported JSON pJSON after the JSON was stringified",
        "exportData": "exportData() exports the JSON data in this.aData as file. The filename is defined by this.aName. if aName=\"myjson\" the filename is \"myjson.json\"",
        "exportSchema": "exportSchema() exports the JSON schema in this.aSchemaJSON as file. The filename is defined by this.aName. if aName=\"myjson\" the filename is \"myjson_schema.json\"",
        "getLocalStorageID4Name": "the LocalStorageID for an item may not contain a dot . Name",
        "loadLS": "loadLS() loads the JSON file from Local Storage",
        "saveLS": "saveLS() stores the JSON file in Local Storage",
        "validate": "validates the current record in the large array against the schema. \nReturns true if record in JSON editor valid according to the JSON schema in this.aSchemaJSON",
        "onChange": "handle onChange event from the JSON editor developed by Jeremy Dorn. This method updates the content in the editor with the record in this.aData[this.current] ",
        "deleteRecord": "delete current record in array and decrease current if is the last",
        "deleteAsk": "deleteAsk() asks the user if deleteRecord() should be performed",
        "check": "checks if the index of the array is between 0 and this.aData.lenth",
        "updateDOM": "updateDOM() updates the index of the currently edited record from the array and updates the length of the array e.g. if a new record was pushed the array this.aData",
        "setEditorData": "setEditorData() sets the Editor with current, data and schema",
        "getEditorData": "getEditorData() create a Hash for this.current, this.aData and this.aSchema",
        "load": "loads the file from Local Storage and updates the DOM values with current, aData loadLS() and load() cannot be merged because loadLS() is called in the this.init() without the possibility to edit() due to the fact that the JSON editor is not created and dependent on the loaded values of the schema",
        "save": "save() stores current index, JSON data and JSON schema with storeLS() into local storage and exports the current JSON data as file"
    },
    "MethodAccess": {
        "init": "public",
        "prev": "public",
        "next": "public",
        "goto": "public",
        "first": "public",
        "last": "public",
        "edit": "public",
        "setSchema": "public",
        "getSchema": "public",
        "export": "public",
        "exportData": "public",
        "exportSchema": "public",
        "getLocalStorageID4Name": "public",
        "loadLS": "public",
        "saveLS": "public",
        "validate": "public",
        "onChange": "public",
        "deleteRecord": "public",
        "deleteAsk": "public",
        "check": "public",
        "updateDOM": "public",
        "setEditorData": "public",
        "getEditorData": "public",
        "load": "public",
        "save": "public"
    },
    "sClassList": "Editor4JSON",
    "tMethodAccess": "public",
    "JSCC_version": "1"
}